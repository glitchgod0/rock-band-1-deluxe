#define connected_controller_types
(())
#define HELPBAR_HANDLERS
((file
      "helpbar.milo")
   (icons
      ((red1.lbl green1.lbl yellow1.lbl blue1.lbl)
         (red2.lbl green2.lbl yellow2.lbl blue2.lbl)
         (red3.lbl green3.lbl yellow3.lbl blue3.lbl)))
   (actions
      (red_action.lbl green_action.lbl yellow_action.lbl blue_action.lbl))
   (config
      ())
   (null_config
      ())
   (buttons
      (B A R X))
   (frets
      (r g y b))
   (pads
      (2 1 F 3))
   (limit_to_player_num -1)
   (enter
      {$this set_mode_left})
   (poll
      {all.grp
         set
         showing
         {!
            {ui in_transition}}})
   (set_mode_right
      {red_action.lbl set alignment kMiddleRight}
      {if_else
         {==
            {rnd aspect}
            kWidescreenAspect}
         {$this set_frame 3}
         {$this set_frame 2}})
   (set_mode_left
      {red_action.lbl set alignment kMiddleLeft}
      {if_else
         {==
            {rnd aspect}
            kWidescreenAspect}
         {$this set_frame 1}
         {$this set_frame 0}})
   (JOYPAD_CONNECT_MSG
      {$this refresh_display})
   (update
      ($new_screen)
      {if
         $new_screen
         {if
            {$new_screen
               has
               (helpbar)}
            {set
               [config]
               {$new_screen get helpbar}}
            {$this refresh_display}}
         {$this
            set_waiting
            {if_else
               {$new_screen
                  has
                  (helpbar_waiting)}
               {$new_screen get helpbar_waiting}
               FALSE}}})
   (set_config
      ($new_config)
      {set
         [config]
         $new_config}
      {$this refresh_display})
   (set_limit_to_player_num
      ($num)
      {set
         [limit_to_player_num]
         $num}
      {$this refresh_display})
   (refresh_display
      {foreach_int
         $i
         0
         {size
            [actions]}
         {{elem
               [actions]
               $i}
            set
            text_token
            ''}
         {{elem
               [actions]
               $i}
            set
            showing
            FALSE}
         {foreach
            $icon_array
            [icons]
            {{elem $icon_array $i}
               set
               showing
               FALSE}}}
      {resize connected_controller_types 0}
      {if_else
         {==
            [limit_to_player_num]
            -1}
         {do
            ($state
               {if_else
                  {&&
                     {session num_players}
                     [limit_to_session]}
                  kGameControllerParticipating
                  kGameControllerAll})
            {if
               {gamecfg is_instrument_connected guitar $state}
               {push_back
                  connected_controller_types
                  [frets]}}
            {if
               {gamecfg is_instrument_connected vocals $state}
               {push_back
                  connected_controller_types
                  [buttons]}}
            {if
               {gamecfg is_instrument_connected drum $state}
               {push_back
                  connected_controller_types
                  [pads]}}}
         {switch
            {gamecfg
               get_instrument_from_controller
               [limit_to_player_num]}
            (guitar
               {push_back
                  connected_controller_types
                  [frets]})
            (vocals
               {push_back
                  connected_controller_types
                  [buttons]})
            (drum
               {push_back
                  connected_controller_types
                  [pads]})}}
      {if
         [config]
         {foreach_int
            $i
            0
            {size
               [config]}
            {if_else
               {&&
                  {< $i 2}
                  {platform_mgr is_enter_cancel_swapped}}
               {set
                  $x
                  {- 1 $i}}
               {set $x $i}}
            {if
               {&&
                  {!=
                     ''
                     {elem
                        [config]
                        $i}}
                  {!=
                     0
                     {size connected_controller_types}}}
               {{elem
                     [actions]
                     $i}
                  set
                  text_token
                  {elem
                     [config]
                     $i}}
               {{elem
                     [actions]
                     $i}
                  set
                  showing
                  TRUE}
               {foreach_int
                  $j
                  0
                  {size connected_controller_types}
                  {{elem
                        {elem
                           [icons]
                           $j}
                        $i}
                     set
                     text_token
                     {elem
                        {elem connected_controller_types $j}
                        $x}}
                  {{elem
                        {elem
                           [icons]
                           $j}
                        $i}
                     set
                     showing
                     TRUE}}}}})
   (set_waiting
      ($waiting)
      {ornate_leader.tnm
         animate
         (range
            {ornate_leader.tnm frame}
            {if_else
               $waiting
               {ornate_leader.tnm end_frame}
               0})
         (period 0.25)}
      {if
         $waiting
         {waiting.lbl set text_token $waiting}}))
{new
   UIPanel
   helpbar
   HELPBAR_HANDLERS
   (limit_to_session TRUE)}
{new
   UIPanel
   helpbar_dialog
   HELPBAR_HANDLERS
   (limit_to_session TRUE)}
{new
   MetaPanel
   meta
   (file meta_panel.milo)
   (playing_post_set FALSE)
   (load
      {movie_panel load})
   (is_loaded
      {movie_panel is_loaded})
   (unload
      {movie_panel unload})
   (finish_load
      {char_cache cache_enable TRUE}
      {char_cache cache_update})
   (enter
      {platform_mgr enable_xmp}
      {set
         [playing_post_set]
         FALSE})
   (music_start
      {if
         {&&
            {$this is_up}
            {!
               {postsong_sfx_panel get active}}}
         {{$this meta_music}
            start}
         {synth play shell_crowd.cue}
         {platform_mgr enable_xmp}})
   (music_stop
      {{$this meta_music}
         stop}
      {synth stop shell_crowd.cue})
   (play_postset_loop
      ($play)
      {if_else
         $play
         {unless
            [playing_post_set]
            {synth play shell_crowd_muffled.cue}}
         {synth stop shell_crowd_muffled.cue}}
      {set
         [playing_post_set]
         $play})}
{new
   UIPanel
   postsong_sfx_panel
   (active FALSE)
   (load
      {set
         [active]
         TRUE})
   (enter
      {set
         [active]
         TRUE}
      {meta music_stop}
      {synth play shell_crowd_muffled.cue})
   (exit
      {set
         [active]
         FALSE}
      {synth stop shell_crowd_muffled.cue})}
#define DIALOG_PANEL_HANDLERS
((helpbar
      ())
   (allow_player
      ($player_num)
      {switch
         [limit]
         (none TRUE)
         (session
            {'||'
               {==
                  {game get leader_num}
                  -1}
               {game is_player_participating $player_num}})
         (leader_session
            {'||'
               {&&
                  {is_leader_local}
                  {game is_player_participating $player_num}}
               {gamemode get always_allow_player}})})
   (set_custom
      ($msg $opt1 $opt2 $focus)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_localized $opt1}
      {opt2.btn set_localized $opt2}
      {opt1.btn set_showing TRUE}
      {opt2.btn set_showing TRUE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing FALSE}
      {set
         [helpbar]
         ('' helpbar_select)}
      {$this set_focus $focus})
   (set_yesno
      ($msg $focus)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing TRUE}
      {no.btn set_showing TRUE}
      {ok.btn set_showing FALSE}
      {set
         [helpbar]
         ('' helpbar_select)}
      {$this set_focus $focus})
   (set_ok
      ($msg)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing TRUE}
      {set
         [helpbar]
         ('' helpbar_continue)}
      {$this set_focus ok.btn})
   (set_msg
      ($msg)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {msg.lbl set_showing TRUE}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing FALSE}
      {set
         [helpbar]
         ('' helpbar_continue)}
      {$this set_focus msg.lbl})
   (set_title
      ($msg)
      {dialog_title.lbl set_showing TRUE}
      {dialog_title.lbl set_localized $msg}))
{new
   DialogPanel
   dialog_panel
   DIALOG_PANEL_HANDLERS
   (file
      "dialog.milo")
   (limit none)
   (enter
      {set
         [limit]
         none}
      {$this set_player_num -1}
      {set
         [helpbar]
         ()})}
{new
   DialogPanel
   event_dialog_panel
   (file
      "event_dialog.milo")}
{new
   UIPanel
   network_busy_icon_panel
   (file network_busy_icon.milo)}
{new
   UIPanel
   remote_member_available_panel
   (file remote_member_available.milo)}
{new
   UIPanel
   content_loading_panel
   (file content_loading.milo)}
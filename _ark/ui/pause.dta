#define PAUSE_SCREEN_HANDLERS
((pause_if_local
      {{$this find pause_title.lbl}
         set_showing
         FALSE}
      {if
         {==
            {session mode}
            kNetLocal}
         {game set_paused TRUE}
         {{$this find pause_title.lbl}
            set_showing
            TRUE}})
   (resume
      {if
         {==
            {session mode}
            kNetLocal}
         {set $game_unpause_on_enter TRUE}}
      {ui pop_screen}))
{new
   UIPanel
   pause_panel
   (file pause.milo)
   (button_count 0)
   (original_flip FALSE)
   (original_hud kVocalStyleScrolling)
   (resync_on_exit TRUE)
   (exit_destination exit_quit)
   (pause_buttons
      (0.btn 1.btn 2.btn 3.btn 4.btn 5.btn 6.btn))
   (check_icons
      (check00.mesh check01.mesh check02.mesh check03.mesh check04.mesh check05.mesh))
   (check_boxes
      (check_bg.mesh check_bg01.mesh check_bg02.mesh check_bg03.mesh check_bg04.mesh check_bg05.mesh))
   (flip_check_index 0)
   (hud_check_index 0)
   (pause_commands
      (pause_resume pause_restart lefty_flip vocal_hud vocal_options practice_new_section new_song gig_guide band_members forfeit pause_quit))
   (active_commands
      ())
   (chose_quit FALSE)
   PAUSE_SCREEN_HANDLERS
   (enter
      {set
         [chose_quit]
         FALSE}
      {set
         [exit_destination]
         exit_new_song}
      {set
         [resync_on_exit]
         TRUE}
      {$this pause_if_local}
      {{game
            get_player
            [player_number]}
         enable_swings
         FALSE}
      {beatmatch
         foreach_active_player
         $p
         {handle
            ({$p track}
               set_enable_vocals_options
               FALSE)}}
      {beatmatch never_allow_input TRUE}
      {do
         ($player
            {beatmatch
               player
               [player_number]})
         {gamertag.lbl
            set_localized
            {get_player_name $player}}
         {instrument.lbl
            set_localized
            {get_player_icon $player}}}
      {helpbar
         set
         limit_to_player_num
         [player_number]}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
      {stagekit_pause TRUE}
      kDataUnhandled)
   (TRANSITION_COMPLETE_MSG
      {if
         {!=
            {session mode}
            kNetLocal}
         {session add_sink $this end_game_msg}
         {if
            {!=
               {session state}
               kNetInGame}
            {ui pop_screen}}})
   (END_GAME_MSG
      {unless
         [chose_quit]
         {ui pop_screen}})
   (exit
      {session remove_sink $this remote_player_left_msg}
      {beatmatch never_allow_input FALSE}
      {helpbar set limit_to_player_num -1}
      {if
         {&&
            {!=
               [player_number]
               -1}
            {!=
               [original_flip]
               {{profile_mgr
                     get_char_options_from_player
                     [player_number]}
                  get_lefty}}}
         {{game
               get_player
               [player_number]}
            update_lefty_flip}}
      {if
         {&&
            {!=
               [player_number]
               -1}
            {!=
               [original_hud]
               {{profile_mgr
                     get_char_options_from_player
                     [player_number]}
                  get_vocal_style}}}
         {{game
               get_player
               [player_number]}
            update_vocal_style}}
      {session remove_sink $this end_game_msg}
      {if
         [resync_on_exit]
         {band_ui_sink set_net_sync TRUE}}
      {stagekit_pause FALSE}
      {beatmatch
         foreach_active_player
         $p
         {handle
            ({$p track}
               set_enable_vocals_options
               TRUE)}})
   (unload
      {{game
            get_player
            [player_number]}
         enable_swings
         TRUE})
   (BUTTON_DOWN_MSG
      {if_else
         {==
            [player_number]
            $player_num}
         {do
            {if
               {'||'
                  {== $button kPad_Start}
                  {== $button kPad_Tri}}
               {set
                  [exit_destination]
                  exit_new_song}
               {$this resume}}
            kDataUnhandled}
         TRUE})
   (BUTTON_UP_MSG
      {if_else
         {==
            [player_number]
            $player_num}
         kDataUnhandled
         TRUE})
   (REMOTE_PLAYER_LEFT_MSG
      {do
         ($ix_button -1)
         {foreach_int
            $i
            0
            {size
               [pause_buttons]}
            {do
               ($state
                  {{elem
                        [pause_buttons]
                        $i}
                     get_state})
               {if
                  {'||'
                     {== kComponentFocused $state}
                     {== kComponentSelecting $state}}
                  {set $ix_button $i}}}}
         {if
            {== $ix_button -1}
            {fail
               "could not find focused/selecting pause button!"}
            {set $ix_button 0}}
         {$this set_up_buttons}
         {while
            {==
               kDisabled
               {{elem
                     [pause_buttons]
                     $ix_button}
                  get_state}}
            {-- $ix_button}}
         {$this
            set_focus
            {elem
               [pause_buttons]
               $ix_button}}})
   (SELECT_START_MSG
      {set
         [exit_destination]
         exit_new_song}
      {find_elem
         [pause_buttons]
         $component
         $ix_button}
      {switch
         {elem
            [active_commands]
            $ix_button}
         (pause_resume
            {$this resume})
         (pause_restart
            {set
               [exit_destination]
               exit_restart}
            {if_else
               {==
                  {gamemode get confirm_restart_screen}
                  ''}
               {$this on_restart}
               {ui
                  goto_screen
                  {gamemode get confirm_restart_screen}}})
         (lefty_flip
            {if
               {!=
                  vocals
                  {{game
                        get_player_config
                        [player_number]}
                     get_track_sym}}
               {do
                  ($options
                     {profile_mgr
                        get_char_options_from_player
                        [player_number]})
                  ($lefty_flipped
                     {$options get_lefty})
                  {$options
                     set_lefty
                     {! $lefty_flipped}}
                  {$this update_lefty_check}}})
         (vocal_hud
            {if
               {==
                  vocals
                  {{game
                        get_player_config
                        [player_number]}
                     get_track_sym}}
               {do
                  ($options
                     {profile_mgr
                        get_char_options_from_player
                        [player_number]})
                  ($hud_style
                     {$options get_vocal_style})
                  {$options
                     set_vocal_style
                     {! $hud_style}}
                  {$this update_vocal_style}}})
         (vocal_options
            {if
               {==
                  vocals
                  {{game
                        get_player_config
                        [player_number]}
                     get_track_sym}}
               {do
                  {set
                     [resync_on_exit]
                     FALSE}
                  {vocal_options_panel
                     set
                     player_num
                     [player_number]}
                  {ui goto_screen pause_vocal_options_screen}}})
         (practice_new_section
            {set
               [exit_destination]
               exit_new_section}
            {$this on_quit})
         ((new_song gig_guide)
            {set
               [exit_destination]
               exit_new_song}
            {if_else
               {gamemode get is_practice}
               {$this on_quit}
               {ui
                  goto_screen
                  {gamemode get confirm_quit_screen}}})
         (band_members
            {set
               [exit_destination]
               exit_change_band}
            {ui
               goto_screen
               {gamemode get confirm_quit_screen}})
         (forfeit
            {set
               [exit_destination]
               exit_forfeit}
            {set
               [resync_on_exit]
               FALSE}
            {ui
               goto_screen
               {gamemode get confirm_quit_screen}})
         (pause_quit
            {set
               [exit_destination]
               exit_quit}
            {set
               [resync_on_exit]
               FALSE}
            {if_else
               {gamemode get is_practice}
               {$this on_quit}
               {ui
                  goto_screen
                  {gamemode get confirm_quit_screen}}})}
      kDataUnhandled)
   (set_up_buttons
      {set
         [button_count]
         0}
      {resize
         [active_commands]
         0}
      {do
         ($previous
            "")
         {foreach
            $button
            [pause_buttons]
            {$button set_showing FALSE}
            {$this enable $button}
            {if
               {!=
                  $previous
                  ""}
               {$previous set nav_down $button}}
            {set $previous $button}}}
      {foreach
         $check
         [check_icons]
         {$check set_showing FALSE}}
      {foreach
         $check
         [check_boxes]
         {$check set_showing FALSE}}
      {do
         ($added)
         {foreach
            $command
            [pause_commands]
            {set $added FALSE}
            {switch
               $command
               (pause_resume
                  {set $added TRUE})
               (pause_restart
                  {if
                     {'||'
                        {gamemode get local_network}
                        {&&
                           {is_leader_local}
                           {==
                              {gamemode get player_arrangement}
                              kArrangeBand}}}
                     {set $added TRUE}
                     {if
                        {<
                           {session num_players}
                           {gamemode get min_players}}
                        {$this
                           disable
                           {elem
                              [pause_buttons]
                              [button_count]}}}})
               (lefty_flip
                  {if
                     {!=
                        vocals
                        {{game
                              get_player_config
                              [player_number]}
                           get_track_sym}}
                     {set $added TRUE}
                     {set
                        [flip_check_index]
                        [button_count]}
                     {set
                        [original_flip]
                        {{profile_mgr
                              get_char_options_from_player
                              [player_number]}
                           get_lefty}}
                     {$this update_lefty_check}})
               (vocal_hud
                  {if
                     {==
                        vocals
                        {{game
                              get_player_config
                              [player_number]}
                           get_track_sym}}
                     {set $added TRUE}
                     {set
                        [hud_check_index]
                        [button_count]}
                     {set
                        [original_hud]
                        {{profile_mgr
                              get_char_options_from_player
                              [player_number]}
                           get_vocal_style}}
                     {$this update_vocal_style}})
               (vocal_options
                  {if
                     {==
                        vocals
                        {{game
                              get_player_config
                              [player_number]}
                           get_track_sym}}
                     {set $added TRUE}})
               (practice_new_section
                  {if
                     {&&
                        {gamemode get is_practice}
                        {!=
                           vocals
                           {{game
                                 get_player_config
                                 [player_number]}
                              get_track_sym}}}
                     {set $added TRUE}})
               (new_song
                  {if
                     {&&
                        {!=
                           {gamemode get pause_new_song_screen}
                           ''}
                        {!
                           {gamemode is_bwt}}
                        {!
                           {gamemode is_solo_tour}}
                        {'||'
                           {gamemode get local_network}
                           {is_leader_local}}}
                     {set $added TRUE}
                     {if
                        {<
                           {session num_players}
                           {gamemode get min_players}}
                        {$this
                           disable
                           {elem
                              [pause_buttons]
                              [button_count]}}}})
               (gig_guide
                  {if
                     {&&
                        {'||'
                           {gamemode get local_network}
                           {is_leader_local}}
                        {'||'
                           {gamemode is_bwt}
                           {gamemode is_solo_tour}}}
                     {set $added TRUE}
                     {if
                        {<
                           {session num_players}
                           {gamemode get min_players}}
                        {$this
                           disable
                           {elem
                              [pause_buttons]
                              [button_count]}}}})
               (band_members
                  {if
                     {&&
                        {!
                           {gamemode is_solo}}
                        {==
                           {gamemode get player_arrangement}
                           kArrangeBand}
                        {'||'
                           {gamemode get local_network}
                           {is_leader_local}}}
                     {set $added TRUE}})
               (forfeit
                  {if
                     {&&
                        {gamemode get ranked}
                        {==
                           {gamemode get player_arrangement}
                           kArrangeHth}
                        {!
                           {gamemode get local_network}}}
                     {set $added TRUE}})
               (pause_quit
                  {if
                     {gamemode get show_pause_quit}
                     {set $added TRUE}})}
            {if
               $added
               {{elem
                     [pause_buttons]
                     [button_count]}
                  set_showing
                  TRUE}
               {{elem
                     [pause_buttons]
                     [button_count]}
                  set
                  text_token
                  $command}
               {push_back
                  [active_commands]
                  $command}
               {'++'
                  [button_count]}}}}
      {{elem
            [pause_buttons]
            {-
               [button_count]
               1}}
         set
         nav_down
         ''}
      {$this set_focus 0.btn})
   (update_lefty_check
      {{elem
            [check_icons]
            [flip_check_index]}
         set_showing
         {{profile_mgr
               get_char_options_from_player
               [player_number]}
            get_lefty}}
      {{elem
            [check_boxes]
            [flip_check_index]}
         set_showing
         TRUE})
   (update_vocal_style
      {{elem
            [check_icons]
            [hud_check_index]}
         set_showing
         {!
            {{profile_mgr
                  get_char_options_from_player
                  [player_number]}
               get_vocal_style}}}
      {{elem
            [check_boxes]
            [hud_check_index]}
         set_showing
         TRUE})
   (on_restart
      {gamemode on_pause_restart})
   (on_quit
      {set
         [chose_quit]
         TRUE}
      {switch
         [exit_destination]
         (exit_change_band
            {if
               {!
                  {is_leader_local}}
               {notify
                  "WARNING: change band triggered by non-leader"}}
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_changemembers_screen 1})
         (exit_forfeit
            {ui goto_screen meta_loading_matchmaking_forfeit_screen})
         (exit_new_section
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_pause_new_section_screen 1})
         (exit_new_song
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_pause_new_song_screen 1})
         (exit_quit
            {ui goto_screen meta_loading_quit_early_screen})
         (exit_restart
            {$this on_restart})})}
{new
   UIScreen
   pause_screen
   (panels pause_panel helpbar)
   (focus pause_panel)
   (helpbar
      (helpbar_returntogame helpbar_select))}
#define CONFIRM_QUIT_HANDLERS
((panels pause_panel dialog_panel)
   (focus dialog_panel))
#define QUIT_DIALOG_SET_UP_BUTTONS
((set_up_buttons
      {if
         {<
            {session num_players}
            {gamemode get min_players}}
         {{dialog_panel find no.btn}
            set_state
            kDisabled}
         {dialog_panel
            set_focus
            {dialog_panel find yes.btn}}}))
{new
   UIScreen
   confirm_quit_screen
   CONFIRM_QUIT_HANDLERS
   (enter
      {dialog_panel
         set_yesno
         {localize confirm_quit}
         no.btn}
      {dialog_panel
         set_player_num
         {pause_panel get player_number}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg})
   (exit
      {dialog_panel set player_num -1}
      {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_START_MSG
      {if
         {==
            $player_num
            {pause_panel get player_number}}
         {switch
            $component
            (yes.btn
               {pause_panel on_quit})
            (no.btn
               {ui goto_screen pause_screen})}}
      kDataUnhandled)}
#define TOUR_BAND_CONFIRM_DIALOG
({dialog_panel
      set_yesno
      {if_else
         {{tour performer}
            fans_lost_on_fail}
         {sprintf
            {localize tour_band_lose_fans_warning}
            {localize_separated_int
               {{tour performer}
                  fans_lost_on_fail}}}
         {localize_token confirm_quit}}
      no.btn})
{new
   UIScreen
   tour_band_quit_screen
   CONFIRM_QUIT_HANDLERS
   (enter
      TOUR_BAND_CONFIRM_DIALOG
      {dialog_panel
         set_title
         {localize_token tour_abandon_gig}}
      {dialog_panel
         set_player_num
         {pause_panel get player_number}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg})
   (exit
      {dialog_panel set player_num -1}
      {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_START_MSG
      {if
         {==
            $player_num
            {pause_panel get player_number}}
         {switch
            $component
            (yes.btn
               {{tour performer}
                  lose_song}
               {pause_panel on_quit})
            (no.btn
               {ui goto_screen pause_screen})}}
      kDataUnhandled)}
{new
   UIScreen
   tour_band_restart_screen
   (panels pause_panel dialog_panel helpbar)
   (focus dialog_panel)
   (helpbar
      ('' helpbar_select))
   (enter
      TOUR_BAND_CONFIRM_DIALOG
      {dialog_panel
         set_title
         {localize_token tour_restart_song}}
      {dialog_panel
         set_player_num
         {pause_panel get player_number}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg})
   (exit
      {dialog_panel set player_num -1}
      {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_START_MSG
      {if
         {==
            $player_num
            {pause_panel get player_number}}
         {switch
            $component
            (yes.btn
               {{tour performer}
                  lose_song}
               {pause_panel on_restart})
            (no.btn
               {ui goto_screen pause_screen})}}
      kDataUnhandled)}
{new
   UIScreen
   solo_tour_restart_screen
   (panels pause_panel dialog_panel helpbar)
   (focus dialog_panel)
   (helpbar
      ('' helpbar_select))
   (enter
      {dialog_panel
         set_yesno
         {localize tour_solo_lose_progress_warning}
         no.btn}
      {dialog_panel
         set_title
         {localize_token tour_solo_restart_song}}
      {dialog_panel
         set_player_num
         {pause_panel get player_number}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg})
   (exit
      {dialog_panel set player_num -1}
      {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_START_MSG
      {if
         {==
            $player_num
            {pause_panel get player_number}}
         {switch
            $component
            (yes.btn
               {pause_panel on_restart})
            (no.btn
               {ui goto_screen pause_screen})}}
      kDataUnhandled)}
{new
   UIScreen
   pause_controller_screen
   PAUSE_SCREEN_HANDLERS
   (enter
      {platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      {if
         {==
            {session mode}
            kNetLocal}
         {game set_paused TRUE}}
      {stagekit_pause TRUE})
   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
      {band_ui_sink set_net_sync TRUE}
      {stagekit_pause FALSE})
   (on_controllers_ok
      {$this reset_controllers}
      {$this resume})
   (reset_controllers
      {game
         foreach_local_player
         $p
         {$p reset_controller FALSE}}
      {tutorials_drums_main_panel reset_controller})}
{new
   UIPanel
   pause_mics_panel
   (file pause_mics.milo)
   (resync_on_exit TRUE)
   PAUSE_SCREEN_HANDLERS
   (enter
      {set
         [resync_on_exit]
         TRUE}
      {$this pause_if_local}
      {foreach_int
         $i
         0
         4
         {set
            $pcfg
            {game get_player_config $i}}
         {set
            $group
            {sprintf
               "mics_player_%02d.grp"
               $i}}
         {set
            $label
            {sprintf
               "mics_player_name%02d.lbl"
               $i}}
         {set
            $manim
            {sprintf
               "talk%02d.mnm"
               $i}}
         {if_else
            {&&
               {$pcfg is_local_player}
               {$pcfg is_participating}}
            {do
               {$label
                  set_localized
                  {{$pcfg player}
                     player_name}}
               {$this enable $label}
               {$group set_showing TRUE}
               {$manim set_frame 1}}
            {do
               {$this disable $label}
               {$group set_showing FALSE}}}}
      {$this check_mics}
      {stagekit_pause TRUE})
   (TRANSITION_COMPLETE_MSG
      {if
         {!=
            {session mode}
            kNetLocal}
         {session add_sink $this end_game_msg}
         {if
            {!=
               {session state}
               kNetInGame}
            {ui pop_screen}}})
   (END_GAME_MSG
      {ui pop_screen})
   (exit
      {session remove_sink $this end_game_msg}
      {synth reset_mics_changed}
      {if
         [resync_on_exit]
         {band_ui_sink set_net_sync TRUE}}
      {stagekit_pause FALSE})
   (check_mics
      {do
         ($enable_resume TRUE)
         {game
            foreach_local_player
            $p
            {do
               ($player_num
                  {$p player_num})
               {if
                  {&&
                     {!= $player_num -1}
                     {game is_player_participating $player_num}
                     {==
                        {{gamecfg get_player_config $player_num}
                           get_track_sym}
                        vocals}}
                  {do
                     ($mic_num
                        {joypad_get_players_padnum $player_num})
                     {if
                        {&&
                           {!= $mic_num -1}
                           {!
                              {synth is_mic_connected $mic_num}}}
                        {set $enable_resume FALSE}}}}}}
         {if_else
            $enable_resume
            {do
               {$this
                  enable
                  {$this find pause_resume.btn}}
               {$this
                  set_focus
                  {$this find pause_resume.btn}}}
            {do
               {$this
                  disable
                  {$this find pause_resume.btn}}
               {$this
                  set_focus
                  {$this find pause_quit.btn}}}}})
   (microphones_changed
      ($vocalists_mic_changed)
      {$this check_mics})
   (poll
      {foreach_int
         $i
         0
         4
         {{sprintf
               "talk%02d.mnm"
               $i}
            set_frame
            {if_else
               {synth is_mic_user_talking $i}
               1
               0}}})
   (BUTTON_DOWN_MSG
      {if_else
         {game is_player_participating $player_num}
         kDataUnhandled
         TRUE})
   (SELECT_START_MSG
      {if
         {game is_player_participating $player_num}
         {switch
            $component
            (pause_resume.btn
               {$this resume})
            (pause_quit.btn
               {set
                  [resync_on_exit]
                  FALSE}
               {ui goto_screen confirm_quit_mics_screen})}}
      kDataUnhandled)
   (on_quit
      {ui goto_screen meta_loading_quit_early_screen})}
{new
   UIScreen
   pause_mics_screen
   (panels pause_mics_panel helpbar)
   (focus pause_mics_panel)
   (helpbar
      ('' helpbar_select))}
{new
   UIScreen
   confirm_quit_mics_screen
   (panels pause_mics_panel dialog_panel)
   (focus dialog_panel)
   (enter
      {dialog_panel
         set_yesno
         {localize confirm_quit}
         no.btn}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg})
   (exit
      {session remove_sink $this remote_player_left_msg})
   (microphones_changed
      ($vocalists_mic_changed)
      {pause_mics_panel microphones_changed $vocalists_mic_changed})
   (REMOTE_PLAYER_LEFT_MSG
      {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_START_MSG
      {switch
         $component
         (yes.btn
            {pause_mics_panel on_quit})
         (no.btn
            {ui goto_screen pause_mics_screen})}
      kDataUnhandled)}
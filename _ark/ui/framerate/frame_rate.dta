#define kFramerateCharNone
(0)
#define kFramerateCharGS
(1)
#define kFramerateCharCPU
(2)
#define kFramerateCharBudget
(3)
{func
   base_venue
   ($venue)
   {cond
      ({has_substr $venue arena}
         arena)
      ({has_substr $venue big_club}
         big_club)
      ({has_substr $venue theater}
         theater)
      ({has_substr $venue small_club}
         small_club)
      unknown}}
{new
   UIPanel
   frame_rate_panel
   (file
      "frame_rate.milo")
   (focus venue.lst)
   (enter
      {venue.lst
         set_data
         (arena_01 arena_02 arena_03 arena_04 arena_05 arena_06 arena_07 arena_08 big_club_01 big_club_02 big_club_03 big_club_04 big_club_05 big_club_06 big_club_07 big_club_08 big_club_09 big_club_10 big_club_11 big_club_12 small_club_01 small_club_02 small_club_03 small_club_04 small_club_05 small_club_06 small_club_07 small_club_08 small_club_09 small_club_10 small_club_11 small_club_12 theater_01 theater_02 theater_03 theater_04 theater_05 theater_06 theater_07 theater_08 theater_09)}
      {song.lst
         set_data
         (runtothehills framerate)}
      {char.lst
         set_data
         (worst budget)}
      {measure.lst
         set_data
         (gs cpu)})
   (SELECT_MSG
      {gamemode set_mode frame_rate}
      {set
         $shots
         {read_file
            {sprint
               "ui/framerate/"
               {base_venue
                  {venue.lst selected_sym}}
               "_"
               {measure.lst selected_sym}
               ".dta"}}}
      {cond
         ({==
               {char.lst selected_sym}
               budget}
            {set $framerate_char kFramerateCharBudget})
         ({==
               {measure.lst selected_sym}
               gs}
            {set $framerate_char kFramerateCharGS})
         ({==
               {measure.lst selected_sym}
               cpu}
            {set $framerate_char kFramerateCharCPU})}
      {setup_game
         {song.lst selected_sym}
         {venue.lst selected_sym}
         ((vocals 3)
            (drum 3)
            (bass 3)
            (guitar 3))}
      {set $framerate_char kFramerateCharNone}
      {{game get_player_config 0}
         set
         autoplay
         TRUE}
      {{game get_player_config 1}
         set
         autoplay
         TRUE}
      {{game get_player_config 2}
         set
         autoplay
         TRUE}
      {{game get_player_config 3}
         set
         autoplay
         TRUE}
      {set $fake_controllers TRUE}
      {ui goto_screen loading_screen})}
{new
   UIScreen
   frame_rate_screen
   (panels frame_rate_panel)}
{new
   UIScreen
   frame_rate_game_screen
   (panels game world_panel coop_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
   (my_enter
      {set $camera.disable_picking 1}
      {set $shot 1}
      {$this update_shot}
      {beatmatch
         foreach_active_player
         $p
         {handle
            ($p set_auto_play_error 34)}})
   (back splash_screen)
   (BUTTON_DOWN_MSG
      {switch
         $button
         (kPad_X
            {'++' $shot}
            {if
               {==
                  $shot
                  {size $shots}}
               {set $shot 1}}
            {$this update_shot})
         (kPad_Tri
            {-- $shot}
            {if
               {== $shot 0}
               {set
                  $shot
                  {-
                     {size $shots}
                     1}}}
            {$this update_shot})
         (kPad_Circle
            {set
               $shot
               {'+' $shot 10}}
            {if
               {>=
                  $shot
                  {size $shots}}
               {set $shot 1}}
            {$this update_shot})
         (kPad_Square
            {set
               $shot
               {- $shot 10}}
            {if
               {<= $shot 0}
               {set
                  $shot
                  {-
                     {size $shots}
                     1}}}
            {$this update_shot})
         kDataUnhandled})
   (update_shot
      {do
         ($i
            {elem $shots $shot})
         {if_else
            {$world exists $i}
            {do
               ($world_shot
                  {$world find $i})
               {if_else
                  {$world_shot platform_ok}
                  {do
                     {$world force_shot $world_shot}
                     {cheat_display
                        show
                        {sprint
                           $shot
                           ": "
                           $i}}}
                  {cheat_display
                     show
                     {sprint
                        "wrong platform: "
                        $i}}}}
            {cheat_display
               show
               {sprint
                  "couldn't find: "
                  $i}}}})}
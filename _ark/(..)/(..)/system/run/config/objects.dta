#define SPHERE
((struct
      (x float)
      (y float)
      (z float)
      (radius float)))
#define VECTOR3
((vector
      (x float)
      (y float)
      (z float)))
#define VECTOR2
((vector
      (x float)
      (y float)))
#define COLOR
((struct
      (r float)
      (g float)
      (b float)))
#define RECT
((struct
      (x float)
      (y float)
      (w float)
      (h float)))
#define MATRIX3
((struct
      (pitch float)
      (roll float)
      (yaw float)
      (x_scale float)
      (y_scale float)
      (z_scale float)))
#define TRANSFORM
((struct
      (pitch float)
      (roll float)
      (yaw float)
      (x_scale float)
      (y_scale float)
      (z_scale float)
      (x float)
      (y float)
      (z float)))
#define QUAT
((struct
      (x float)
      (y float)
      (z float)
      (w float)))
#define BOX
((struct
      (min_x float)
      (max_x float)
      (min_y float)
      (max_y float)
      (min_z float)
      (max_z float)))
(Object
   (description
      "The Object class is the root of the class hierarchy. Every\n        class has Object as a superclass.")
   (types
      (ParticleUI
         (editor
            (part_type
               symbol
               (list
                  (Basic Fancy))
               (refresh basics))
            (basics
               (indent
                  (mat
                     object
                     (class Mat)
                     (help
                        "material for particle system"))
                  (max_parts
                     float
                     (help
                        "maximum number of particles"))
                  (emit_rate
                     (vector
                        (min float)
                        (max float)))
                  (life
                     (vector
                        (min float)
                        (max float)))
                  (speed
                     (vector
                        (min float)
                        (max float)))
                  (start_size
                     (vector
                        (min float)
                        (max float)))
                  (grow_ratio
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (shrink_ratio
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (delta_size
                     (vector
                        (min float)
                        (max float)))
                  (force_dir
                     (vector
                        (x float)
                        (y float)
                        (z float)))
                  (speed_drag
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (bounce
                     object
                     (class Trans))
                  (start_color_1 color)
                  (start_color_1_alpha float)
                  (start_color_2 color)
                  (start_color_2_alpha float)
                  (mid_color_1
                     color
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (mid_color_1_alpha
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (mid_color_2
                     color
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (mid_color_2_alpha
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (end_color_1 color)
                  (end_color_1_alpha float)
                  (end_color_2 color)
                  (end_color_2_alpha float)
                  (mid_color_ratio
                     float
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (preserve_parts bool)
                  (align
                     (indent
                        (with_velocity bool)
                        (stretch_with_speed bool)
                        (stretch_speed float)
                        (constant_area bool)
                        (perspective bool))
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (bursts
                     (indent
                        (burst_max int)
                        (time_between
                           (vector
                              (min float)
                              (max float)))
                        (peak_rate
                           (vector
                              (min float)
                              (max float)))
                        (duration
                           (vector
                              (min float)
                              (max float))))
                     (hide
                        {!=
                           [part_type]
                           Fancy}))
                  (do_spin
                     bool
                     (hide
                        {!=
                           [part_type]
                           Fancy})
                     (refresh basics))
                  (spin
                     (indent
                        (rpm
                           (vector
                              (min float)
                              (max float)))
                        (rpm_drag float)
                        (start_offset
                           (vector
                              (min float)
                              (max float)))
                        (end_offset
                           (vector
                              (min float)
                              (max float))))
                     (hide
                        {!
                           [do_spin]}))
                  (do_bubble
                     bool
                     (hide
                        {!=
                           [part_type]
                           Fancy})
                     (refresh basics))
                  (bubble
                     (indent
                        (bubble_period
                           (vector
                              (min float)
                              (max float)))
                        (bubble_size
                           (vector
                              (min float)
                              (max float))))
                     (hide
                        {!
                           [do_bubble]}))))
            (emit
               (indent
                  (box_emitter
                     (indent
                        (mesh_emitter
                           object
                           (class RndMesh))
                        (extent_1
                           (vector
                              (x float)
                              (y float)
                              (z float)))
                        (extend_2
                           (vector
                              (x float)
                              (y float)
                              (z float)))
                        (pitch
                           (vector
                              (min float)
                              (max float)))
                        (yaw
                           (vector
                              (min float)
                              (max float)))))
                  (relative_parent
                     object
                     (class trans))
                  (relative_motion float)
                  (subsamples int)
                  (frame_drive bool)
                  (pre_spawn bool))))
         (part_type Basic)
         (mat '')
         (max_parts 0)
         (emit_rate 0)
         (life 0)
         (speed 0)
         (start_size 0)
         (delta_size 0)
         (do_bubble 0)
         (bubble_period 0)
         (bubble_size 0)
         (force_dir 0)
         (bounce '')
         (start_color_1 0)
         (start_color_2 0)
         (end_color_1 0)
         (end_color_2 0)
         (preserve_parts 0)
         (grow_ratio 0)
         (shrink_ratio 0)
         (mid_color_ratio 0)
         (mid_color_1 0)
         (mid_color_2 0)
         (do_spin 0)
         (rpm vector 0)
         (rpm_drag 0)
         (start_offset 0)
         (end_offset 0)
         (with_velocity 0)
         (stretch_with_speed 0)
         (stretch_speed 0)
         (constant_area 0)
         (perspective 0)
         (burst_max 0)
         (time_between 0)
         (peak_rate 0)
         (duration 0)
         (speed_drag 0)
         (mesh_emitter '')
         (extent_1 0)
         (extend_2 0)
         (pitch 0)
         (yaw 0)
         (relative_parent '')
         (relative_motion 0)
         (subsamples 0)
         (frame_drive 0)
         (pre_spawn 0)
         (start_color_1_alpha 0)
         (mid_color_1_alpha 0)
         (end_color_1_alpha 0)
         (start_color_2_alpha 0)
         (mid_color_2_alpha 0)
         (end_color_2_alpha 0))
      (timeline
         (editor
            (events
               (array
                  symbol
                  (list
                     {{$this dir}
                        supported_events}))
               (post_sync
                  {$this restart})
               (refresh current))
            (current
               symbol
               (read_only TRUE))
            (fire
               script
               (script
                  {$this fire})
               (refresh current))
            (skip
               script
               (script
                  {$this skip})
               (refresh current))
            (reset
               script
               (script
                  {$this reset})
               (refresh current)))
         (current
            {if_else
               {size
                  [events]}
               {elem
                  [events]
                  [current_index]}
               ''})
         (current_index 0)
         (events
            ())
         (fire
            {handle
               ({$this dir}
                  {elem
                     [events]
                     [current_index]})}
            {$this skip})
         (skip
            {'++'
               [current_index]}
            {if
               {>=
                  [current_index]
                  {size
                     [events]}}
               {set
                  [current_index]
                  0}})
         (reset
            {set
               [current_index]
               0})))
   (views
      (Note
         (note
            {$this note}
            {$this set_note $milo_value}))))
(ObjectDir
   (description
      "An ObjectDir keeps track of a set of Objects.  \n      It can subdir or proxy in other ObjectDirs.  \n      To rename subdir or proxy files search for remap_objectdirs in system/run/config/objects.dta")
   (types)
   (editor
      (subdirs
         (array file)
         (help
            "Subdirectories of objects")
         (post_sync
            {handle
               ($this enter)}
            {milo update_objects})
         (hide
            {$this is_proxy}))
      (proxy_file
         file
         (hide
            {!
               {$this is_proxy}})
         (post_sync
            {handle
               ($this enter)}))))
#include rnd_objects.dta
#include synth_objects.dta
#include ../char/char_objects.dta
#include ../ui/ui_objects.dta
#include ../track/track_objects.dta
#include ../world/world_objects.dta
#ifdef INIT_BAND
#include ../band/band_objects.dta
#endif